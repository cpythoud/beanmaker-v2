Release Notes for Beanmaker CLI
-------------------------------

v2.0 (2024-07-02)

- move from 1.0-SNAPSHOT to an actual version number
- the libraries are deployed on so many projects now that they cannot be considered alpha or beta anymore, plus we
  need versioning for projects that are moving at different speeds

V2.0.1 (2024-07-23)

- add removeFileExtension() to Files class
- update Version management

V2.1 (2024-08-01)

- introduce the possibility to initialize the database reference in DbBeans via an ad hoc class
- in package util, add methods to read resource files as a string or list of strings
- in package util, add Process utility class to manage execution of external processes
- in package util, add some new methods to create Date, Time and Timestamp objects
- remove custom logging framework

V2.2 (2024-12-24)
INCOMPATIBLE CHANGES:
- simplify data formatting by removing BeanFormatter, BeanFormatterBase, BeanFormatterInterface,
  BeanFormatterInterfaceBase and reengineer LocalDbBeanFormatter, FormattedBeanData and FormattedBeanDataBase
  to pick up the slack
- reengineer BeanParameter and BeanParameterBase to fully enforce the singleton approach (BeanParameter becomes
  an enum and BeanParameterBase is now an interface)

BECAUSE OF THE CHANGES ABOVE, THE CODE FOR ALL BEANS MUST BE REGENERATED AND FILES THAT ARE NO LONGER BEING
CREATED BY THIS VERSION MUST BE DELETED FROM YOUR CODEBASE.

BUG FIXES AND MINOR CHANGES:
- fix a bug in SingleElements (runtime.dbutils) when retrieving elements in a DBTransaction
- fix a bug in code generation for labels that are not required: no per-language value should be reported as required
  if the field itself is not required
- fix a bug where an empty label was created for an optional label field instead of leaving the field empty; this fix
  includes the addition of function cachedValuesExist() to DbBeanEditor interface that will need to be implemented by
  client libraries/programs
- fix bug: CSV importer classes were not correctly referencing column name for boolean fields
- in code generator, when reporting a field that is too long, add the length of the field as a second argument to the
  error message composing function
- add possibility to dynamically instantiate bean editors to the runtime
- add BeanEditorInterface to the runtime to allow client classes that mimic an editor to implement it without having
  to subclass DbBeanEditor

V2.3 (TBD)

INCOMPATIBLES CHANGES:
- leaked FileItem from HttpRequestParameters has been removed and replaced by inner class UploadedFile
- field validation has been revamped with:
    - introduction of FieldValidationFunction class to replace complex generic arguments used in lists of validation
      functions
    - introduction of a warning level in bean validation logic;
    - validation checking functions have been renamed to distinguish warnings, errors that should short circuit the
      validation logic and error that should be reported while letting the validation process continue
- introduce the notion of region to DbBeanLanguage for finer localization (ex. en-US vs en)
- add support for a hierarchy of languages in multilingual projects, where label value for a language+region,
  if they are not directly available, can be retrieved from the raw language labels and then, if still unavailable,
  from the default language
- add support to use id_label, id_name_label, id_description_label fields, if present, to determine the 'name'
  (its representation in tiles and lists)
- add support in BeanParametersBase to record database tables where the bean is referenced and to check the presence
  of such references; this is used in the context of the implementation of the okToDelete() function in master tables;
  because of this all BeanMasterTableViewBase source files need to be regenerated
- by default error message container IDs are now of the form: error_message_<Bean name>_<Bean ID>; this guarantee the
  uniqueness of these ids when creating complex interfaces; existing code might need to be changed if it relies
  on default generation of error message container
- refactored MoneyFormat class to better correspond to Builder Pattern standard; theoretically, might affect existing
  code
- refactored SingleElements editor retrieval functions to accept arguments of type E extends DbBeanEditorInterface
  instead of E extends DbBeanEditor ; the change does not strictly speaking introduce an incompatibility, but any
  calling code should probably be recompiled
- Code management has been completely revamped, with liberal use of interfaces DbBeanWithUnicode and
  DbBeanEditorWithUniqueCode, affected code will need to be regenerated and recompiled to take advantage of the
  new functionality

All generated code from version 2.2 must be regenerated. In editable files, overloaded functions related to file
handling, data validation and naming and ordering beans should be checked.

NEW FEATURES:
- add two separate annotations to distinguish generated files that can be edited from those that should not be (replace
  use of javax.annotation.processing.Generated)
- add support for ApplicationParameters singleton, to centralize application parameters and allow data libraries
  built with Beanmaker to be used in more than one project/deliverable.
- add support for subcontainers in forms, so the the form's fields can be placed in a subcontainer and the form's
  buttons in another (this to help take advantage of CSS frameworks that offer facilites to separate body and
  footer in modales)
- introduce Bootstrap 5 HtmlFormHelper
- introduce direct support in BeanMasterTableViewBase for links to a detail view: removes the need for repetitive
  overloading of the getEditCell() function
- add 'sortOnHeaderClick' boolean to master table to toggle on and off the sorting of table lines when the user
  click on a column header (on by default); allows to disable this on some table with drag'n drop item_order
  rearrangement
- create LocalLabelCache, to cache labels in the context of multilingual master tables: for large tables this allows
  a considerable reduction of the number of queries run against the database, especially if safe labels are used;
  the number of queries can go from thousands to barely a dozen
- add new parameter 'extraFormRequestParameters' to beanmaker2.js, that is a javascript array of parameters to be
  looked up in the dataset of the edit link and that will be translated into request parameters with their
  corresponding value when the web form is posted; this will help when extra information is required
  to initialize a new record/bean
- add function to check if a label is unique in context (specific table field)
- add DbBeanHtmlSelector class to runtime as an helper class to generate HTML selects from a list of beans
- enhance robustness of CSV parsing classes and functions and avoids unnecessary exceptions when fields are empty
- function to generate codes from label content ("My Data" -> my_data)

BUG FIXES:
- bug fix for: drag and drop doesn't work for tables with an item_order linked to an other field
- bug fix for: cannot create more than one instance of Beanmaker2 javascript object on the same page
- bug fix for: null String saved as empty text instead of a SQL NULL value
- bug fix for: MoneyFormat builder doesn't work correctly as default format is leaking in all builder format
               creation; doesn't work at all if builder is used to format strings
- bug fix for: not losing the ID of a label during data validation: allows unicity test on label content and makes
               sure that we are not creating orphaned label with every update (didn't seem to be the case, but
               definitely cannot happen now)

MINOR CHANGES:
- code cleanup in master tables
- improve some exception messages
- various small improvements and fixes
- various utility functions added
